import os
import threading
import asyncio
import logging
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from ebooklib import epub
from bs4 import BeautifulSoup
print(f"TOKEN: {TOKEN}")  # –î—Ä—É–∫—É—î–º–æ —Ç–æ–∫–µ–Ω —É –ª–æ–≥–∞—Ö
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
TOKEN = "7421379071:AAEu0-FZdi1KBzpusgFc4Ipe2e3oCqoPiZ8"

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("7421379071:AAEu0-FZdi1KBzpusgFc4Ipe2e3oCqoPiZ8")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
from aiogram.enums import ParseMode

...
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–∏–π Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—É (Render –ø–æ—Ç—Ä–µ–±—É—î –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ –ø–æ—Ä—Ç—É)
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
threading.Thread(target=run_flask).start()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–Ω–∏–≥ –ø–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
user_books = {}

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∫–Ω–∏–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ EPUB üìö")

# –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É EPUB
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    if not message.document.file_name.endswith(".epub"):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ EPUB üìñ")
        return

    file_id = message.document.file_id
    file_path = f"downloads/{file_id}.epub"
    os.makedirs("downloads", exist_ok=True)
    await message.document.download(destination=file_path)
    await message.answer("–ö–Ω–∏–≥–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞! –û–±—Ä–æ–±–ª—è—é...")

    try:
        book = epub.read_epub(file_path)
        text = ""
        for item in book.get_items():
            if item.get_type() == epub.ITEM_DOCUMENT:
                soup = BeautifulSoup(item.get_body_content(), "html.parser")
                text += soup.get_text() + "\n\n"
        user_books[message.chat.id] = text
        await message.answer("–ö–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —á–∏—Ç–∞–Ω–Ω—è! –ù–∞–ø–∏—à–∏ /read, —â–æ–± –ø–æ—á–∞—Ç–∏.")
    except Exception as e:
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–∏–≥–∏.")
        logging.error(f"Error reading EPUB: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /read ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É —á–∞—Å—Ç–∏–Ω–∞–º–∏
@dp.message_handler(commands=['read'])
async def send_book(message: types.Message):
    user_id = message.chat.id
    if user_id not in user_books:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –∫–Ω–∏–≥—É!")
        return

    text = user_books[user_id]
    chunk_size = 1000  # –º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏
    for i in range(0, len(text), chunk_size):
        await message.answer(text[i:i+chunk_size])
        await asyncio.sleep(1)
    await message.answer("–¶–µ –∫—ñ–Ω–µ—Ü—å –∫–Ω–∏–≥–∏!")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É polling
async def main():
    try:
        await dp.start_polling()
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())


